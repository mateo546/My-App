pipeline {
  agent any
  stages {
    stage('install') {
      steps {
        git(branch: 'master', url: 'https://github.com/mateo546/My-App.git')
        sh 'npm install'
      }
    }
    
    stage('Instalar kubectl') {
      steps {
        // Ejecutar el comando de instalación de kubectl en el servidor Jenkins utilizando "sh"
        sh 'dpkg --configure -a'
        sh 'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -'
        sh 'echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list'
        sh 'apt update'
        sh 'apt install -y kubectl'
      }    
    }

    stage('Deploy-To-AKS') {
      steps {
        withCredentials(bindings: [azureServicePrincipal("Azure-Service-Principal")]) {
          sh 'az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}'
          //el comando a continuacion se conecta a azure y descarga las credenciales necesarias para acceder al clúster de Kubernetes.
          sh "az aks get-credentials --resource-group SOCIUSRGLAB-RG-MODELODEVOPS-AKS --name ModeloDevOps-AKS" 
          //con las credenciales extraidas de azure y ya conectado al cluster, se aplica el manifiesto.
          sh "kubectl apply -f namespace.yaml"
          sh "kubectl apply -f deployment.yaml -n mateo-pokeapp-dev --validate=false"
          //Posibles futuros archivos de ingress, testeo(locust) o metricas(prometheus)
        }
      }
    }
    
    stage('Manual Intervention') {
      steps {
        input(message: 'Confirm Pokeapp deploy to develop?', ok: 'Yes. do it')
      }
    }

  }
  tools {
    nodejs 'NodeJS'
    dockerTool 'Docker1'
  }        
  environment {
    KUBECONFIG1 = "/path/to/deployment.yaml"
    KUBECONFIG = "/path/to/namespace.yaml" 
  }
}  

